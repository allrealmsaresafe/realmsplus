const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const wait = require('fs')
const userDB = require('../models/userDB')
const mongoose = require('mongoose')
const hackerDB = require('../models/hackerDB')
const discordDB = require('../models/discordDB')
const { Authflow, Titles } = require('prismarine-auth') 
const { RealmAPI } = require('prismarine-realms')
const options = {codeCallback: console.log(), authTitle: Titles.MinecraftNintendoSwitch, deviceType: 'Nintendo', flow: 'live'}
module.exports = {
	data: new SlashCommandBuilder()
		.setName('realm')
		.setDescription('Interact with your Bedrock Realm'),
	async execute(interaction) {
		try {
			if (!interaction.channel) return interaction.reply(`**CommandError:** This command can not be ran in DMs!`)
			if (mongoose.connection.readyState != 1) return await interaction.reply({ content: `Database not connected! Run the command again in 5 seconds!`, ephemeral: true})
			let userData = await userDB.findOne({ userID: interaction.user.id })
            if (!userData) {
              newUser = await userDB.create({userID: interaction.user.id,botBan: false,xuid: '0',accessToken: '0',email: '0',ownedRealms: [{realmID: '0', realmName: '0'}],addCount: 0,reportCount: 0,isAdmin: false, databasePerms: false});newUser.save().catch((error) => {
                        return console.log(error)
                      })
              userData = await userDB.findOne({ userID: interaction.user.id })
            }
            const userIdentifier = `${interaction.user.id}`
const cacheDir = './authentication'
const authflow = new Authflow(userIdentifier, cacheDir, options, async (res) => {
    await interaction.deferReply()
const api = RealmAPI.from(authflow, 'bedrock')
const realms = await api.getRealms()
const realmsRaw = realms.map(realm => '**' + realm.name + '**' + '\nID: ' + realm.id);
const list = realmsRaw.toString().replaceAll(',', '\n\n')
const realmsEmbed = {
	color: 946466,
	title: `All of the realms your account is in`,
	description: `${list}`,
	timestamp: new Date().toISOString(),
	footer: {
	  text: `${process.env.FOOTER}`,
	  icon_url: 'https://cdn.discordapp.com/attachments/1053080642386153583/1060304303518142544/rdb.png',
	},
	};
return interaction.editReply({embeds: [realmsEmbed]})
})
	} catch (error) {
		const errorChannel = interaction.client.channels.cache.get('1086347050838401074')
		if (interaction.channel) await errorChannel.send(`There has been an error! Here is the information sorrounding it.\n\nServer Found In: **${interaction.guild.name}**・**${interaction.guild.id}**\nUser Who Found It: **${interaction.user.tag}**・**${interaction.user.id}**\nFound Time: <t:${Math.trunc(Date.now() / 1000)}:R>\nThe Reason: **Bot Information Command has an error**\nError: **${error.stack}**\n\`\`\` \`\`\``)
		console.log(error)
	}
	},
};